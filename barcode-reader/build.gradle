apply plugin: 'com.android.library'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'maven-publish'

ext {
    bintrayRepo = 'maven'
    bintrayName = 'barcode-reader'

    publishedGroupId = 'com.appdevper'
    libraryName = 'BarcodeReader'
    artifact = 'barcode-reader'

    libraryDescription = 'BarcodeReader on Android'

    siteUrl = 'https://gitlab.com/app-devper/barcode-reader'
    gitUrl = 'https://gitlab.com/app-devper/barcode-reader.git'

    libraryVersion = '1.0.0'

    developerId = 'worawit'
    developerName = 'Worawit Boonsorn'
    developerEmail = 'worawit.bs@gmail.com'

    licenseName = 'The Apache Software License, Version 2.0'
    licenseUrl = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
    allLicenses = ["Apache-2.0"]
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

tasks.withType(org.gradle.api.tasks.javadoc.Javadoc) {
    options.encoding = 'UTF-8'
}

android {

    compileSdkVersion 27
    defaultConfig {
        minSdkVersion 15
        targetSdkVersion 27
        versionCode 1
        versionName libraryVersion
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    packagingOptions {
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/notice'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license'
        exclude 'META-INF/license.txt'
    }
}

publishing {
    publications {
        aar(MavenPublication) {
            groupId publishedGroupId
            version libraryVersion
            artifactId artifact

            pom.withXml {
                def dependencies = asNode().appendNode('dependencies')
                configurations.getByName("releaseCompileClasspath").getResolvedConfiguration().getFirstLevelModuleDependencies().each {
                    def dependency = dependencies.appendNode('dependency')
                    dependency.appendNode('groupId', it.moduleGroup)
                    dependency.appendNode('artifactId', it.moduleName)
                    dependency.appendNode('version', it.moduleVersion)
                }
            }

            task androidJavadocs(type: Javadoc) {
                failOnError false
                source = android.sourceSets.main.java.srcDirs
                // encoding = 'UTF-8'
                classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
            }

            task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
                classifier = 'javadoc'
                // encoding = 'UTF-8'
                from androidJavadocs.destinationDir
            }

            task androidSourcesJar(type: Jar) {
                classifier = 'sources'
                from android.sourceSets.main.java.sourceFiles
            }

            artifacts {
                archives androidSourcesJar
                archives androidJavadocsJar
            }

            // Tell maven to prepare the generated "*.aar" file for publishing
            artifact("$buildDir/outputs/aar/${project.getName()}-release.aar")
            artifact androidJavadocsJar
            artifact androidSourcesJar
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation 'com.android.support:appcompat-v7:27.0.0'
    implementation 'com.android.support:design:27.0.0'

    implementation 'com.google.android.gms:play-services-vision:11.0.2'
    implementation 'com.android.support:support-v4:27.0.0'
}

// Bintray
Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())

bintray {
    user = properties.getProperty("bintray.user")
    key = properties.getProperty("bintray.apikey")

    configurations = ['archives']
    pkg {
        repo = bintrayRepo
        name = bintrayName
        desc = libraryDescription
        websiteUrl = siteUrl
        vcsUrl = gitUrl
        licenses = allLicenses
        publish = true

    }
}
